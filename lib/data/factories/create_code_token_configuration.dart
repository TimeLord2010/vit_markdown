import 'package:vit_markdown/data/models/lang_token_configuration.dart';

LangTokenConfiguration createLangTokenConfiguration(String language) {
  var jsConfiguration = LangTokenConfiguration(
    stringPattern: RegExp(r'''("[^"]*"|'[^']*'|`[^`]*`)'''),
    commentPattern: RegExp(r' //.*?$|/\*[\s\S]*?\*/'),
    separatorPattern: RegExp(r'[;\n]'),
    keywords: [
      'var',
      'let',
      'const',
      'function',
      'class',
      'extends',
      'constructor',
      'super',
      'this',
      'static',
      'new',
      'delete',
      'typeof',
      'instanceof',
      'void',
      'null',
      'undefined',
      'true',
      'false',
      'async',
      'await',
      'import',
      'export',
      'default',
      'get',
      'set',
    ],
    controlFlow: [
      'if',
      'else',
      'switch',
      'case',
      'break',
      'default',
      'while',
      'do',
      'for',
      'of',
      'in',
      'continue',
      'return',
      'try',
      'catch',
      'finally',
      'throw',
      'yield',
    ],
  );
  return switch (language.toLowerCase()) {
    'bash' => LangTokenConfiguration(
        stringPattern: RegExp(r'''("[^"]*"|'[^']*')'''),
        commentPattern: RegExp(r'#.*?$'),
        separatorPattern: RegExp(r'[;\n|&]'),
        keywords: [
          'local',
          'export',
          'declare',
          'readonly',
          'eval',
          'source',
          'unset',
          'set',
          'shift',
          'shopt',
          'exit',
          'exec',
          'alias',
          'unalias',
          'command',
          'builtin',
          'let',
          'true',
          'false',
          'test',
          'echo',
          'read',
          'cd',
          'pwd',
        ],
        controlFlow: [
          'if',
          'then',
          'else',
          'elif',
          'fi',
          'case',
          'in',
          'esac',
          'for',
          'do',
          'done',
          'while',
          'until',
          'select',
          'break',
          'continue',
          'return',
          'function',
        ],
      ),
    'dart' => LangTokenConfiguration(
        stringPattern: RegExp(r'''("([^"\\]|\\.)*"|'([^'\\]|\\.)*')'''),
        commentPattern: RegExp(r'//.*?$', multiLine: true),
        separatorPattern: RegExp(r'[;\n]'),
        keywords: [
          'class',
          'enum',
          'const',
          'true',
          'false',
          'void',
          'abstract',
          'final',
          'static',
          'var',
          'new',
          'this',
          'super',
          'extends',
          'implements',
          'interface',
          'null',
          'late',
          'async',
          'await',
          'required',
        ],
        controlFlow: [
          'if',
          'while',
          'else',
          'for',
          'break',
          'return',
          'switch',
          'case',
          'default',
          'do',
          'try',
          'catch',
          'finally',
          'throw',
          'assert',
          'yield',
          'continue',
        ],
      ),
    'javascript' => jsConfiguration,
    'js' => jsConfiguration,
    'python' => LangTokenConfiguration(
        stringPattern: RegExp(
            r'''("""[\s\S]*?"""|\'\'\'[\s\S]*?\'\'\'|[rR]?"(?:[^"\\]|\\.)*"|[rR]?'(?:[^'\\]|\\.)*')'''),
        commentPattern: RegExp(r'#.*?$'),
        separatorPattern: RegExp(r'[\n]'),
        keywords: [
          'class',
          'def',
          'lambda',
          'import',
          'from',
          'as',
          'global',
          'nonlocal',
          'None',
          'True',
          'False',
          'and',
          'or',
          'not',
          'is',
          'in',
          'async',
          'await',
          'self',
          'super',
          'property',
          'with',
        ],
        controlFlow: [
          'if',
          'elif',
          'else',
          'match',
          'case',
          'while',
          'for',
          'break',
          'continue',
          'return',
          'try',
          'except',
          'finally',
          'raise',
          'assert',
          'yield',
          'pass',
        ],
      ),
    _ => LangTokenConfiguration(
        // Handles most common string formats including quotes and escape sequences
        stringPattern: RegExp(r'''("(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*')'''),
        // Handles both single-line and multi-line comments
        commentPattern: RegExp(r'//.*?$|/\*[\s\S]*?\*/', multiLine: true),
        // Common statement separators
        separatorPattern: RegExp(r'[;\n]'),
        keywords: [
          // Common keywords across many languages
          'class',
          'function',
          'var',
          'const',
          'static',
          'this',
          'super',
          'new',
          'true',
          'false',
          'null',
          'void',
          'public',
          'private',
          'protected',
          'import',
          'export',
        ],
        controlFlow: [
          // Common control flow statements
          'if',
          'else',
          'for',
          'while',
          'do',
          'break',
          'continue',
          'return',
          'switch',
          'case',
          'default',
          'try',
          'catch',
          'finally',
          'throw',
        ],
      ),
  };
}
